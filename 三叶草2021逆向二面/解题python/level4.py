from z3 import *
solver = Solver()
v10=[0]*128
v9=[0]*64
flag=[0]*64
date=[0x0005D289, 0x0005C659, 0x00065C79, 0x0004FD0E, 0x0004F823, 0x00084087, 0x00066F15, 0x00063A58, 0x00063A62, 0x0005F8BB, 0x0006D888, 0x00050CED, 0x00052684, 0x0008AF30, 0x0006828B, 0x00061036, 0x00064021, 0x00068A66, 0x0006A9F2, 0x0005493F, 0x00055EAE, 0x0009208E, 0x0007618F, 0x00064B99, 0x00064859, 0x00067B98, 0x0006EDF5, 0x00052343, 0x00057E44, 0x000936F3, 0x00074C2D, 0x0006AF59, 0x000672BE, 0x0006C69D, 0x0006D764, 0x00051925, 0x00057E88, 0x0008E5C6, 0x00075780, 0x000615EC, 0x0007526A, 0x00073162, 0x00076F1E, 0x0005B1D1, 0x0005D2A6, 0x0009EDA8, 0x0007F559, 0x00074A16, 0x00060EF2, 0x0005DB87, 0x000601FF, 0x000468CB, 0x00049646, 0x00079A2B, 0x0006226D, 0x00052180, 0x00066B74, 0x0006AED1, 0x000734EC, 0x000558F3, 0x0005C292, 0x00095FD0, 0x000774CA, 0x00066FEC]
for i in range(64):
    flag[i] = BitVec('flag%d' % i, 8)
for i in range(64):
    solver.add(flag[i] >= 32)
    solver.add(flag[i] <= 126)
for i in range(8):
    for j in range(8):
        v9[8 * i + j] = flag[8 * i + j]
v10[0] = 860
v10[1] = 626
v10[2] = 469
v10[3] = 427
v10[4] = 981
v10[5] = 359
v10[6] = 733
v10[7] = 115
v10[8] = 279
v10[9] = 431
v10[10] = 807
v10[11] = 551
v10[12] = 413
v10[13] = 581
v10[14] = 670
v10[15] = 748
v10[16] = 714
v10[17] = 412
v10[18] = 298
v10[19] = 993
v10[20] = 716
v10[21] = 389
v10[22] = 464
v10[23] = 772
v10[24] = 879
v10[25] = 667
v10[26] = 216
v10[27] = 221
v10[28] = 367
v10[29] = 869
v10[30] = 151
v10[31] = 223
v10[32] = 425
v10[33] = 188
v10[34] = 327
v10[35] = 732
v10[36] = 319
v10[37] = 454
v10[38] = 500
v10[39] = 758
v10[40] = 922
v10[41] = 902
v10[42] = 423
v10[43] = 784
v10[44] = 518
v10[45] = 798
v10[46] = 998
v10[47] = 854
v10[48] = 426
v10[49] = 559
v10[50] = 734
v10[51] = 496
v10[52] = 159
v10[53] = 780
v10[54] = 959
v10[55] = 796
v10[56] = 527
v10[57] = 894
v10[58] = 306
v10[59] = 817
v10[60] = 112
v10[61] = 781
v10[62] = 699
v10[63] = 181
for k in range(8):
    for m in range(8):
        v5 = 0
        for n in range(8):
            v5 += v9[8 * k + n] * v10[8 * m + n]
        v10[8 * k + 64 + m] = v5
for i in range(8):
    for j in range(8):
         solver.add(v10[8 * i + 64 + j] == date[8 * i + j])
         if solver.check() == sat:
            model = solver.model()
            s = []
            for x in range(64):
                s += chr(model[flag[x]].as_long().real)
                s = ''.join(s)
print(s)